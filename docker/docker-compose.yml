version: '3.8'

networks:
  fraudetect-net:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    networks:
      - fraudetect-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    networks:
      - fraudetect-net
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis:
    image: redis:6.2-alpine
    container_name: redis
    networks:
      - fraudetect-net
    ports:
      - '6379:6379'

  mlflow:
    image: python:3.8-slim
    container_name: mlflow_server
    networks:
      - fraudetect-net
    command: >
      sh -c "pip install mlflow boto3 &&
             mlflow server --host 0.0.0.0 --port 5000 --default-artifact-root /mlruns"
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlruns

  # Flink and Spark setups can be complex and are often run on dedicated clusters.
  # The services below are simplified examples for local development.
  # For a production setup, you would use a standalone cluster or a service like EMR/Databricks.

  flink-jobmanager:
    image: pyflink/playgrounds:1.17-latest
    container_name: flink_jobmanager
    networks:
      - fraudetect-net
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager

  flink-taskmanager:
    image: pyflink/playgrounds:1.17-latest
    container_name: flink_taskmanager
    networks:
      - fraudetect-net
    depends_on:
      - flink-jobmanager
    command: taskmanager
    scale: 2
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2

  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark_master
    networks:
      - fraudetect-net
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - "SPARK_PUBLIC_DNS=localhost"

  spark-worker:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark_worker
    networks:
      - fraudetect-net
    depends_on:
      - spark-master
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - "SPARK_PUBLIC_DNS=localhost"
    ports:
      - "8082:8081"

  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    networks:
      - fraudetect-net
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:8.5.2
    container_name: grafana
    networks:
      - fraudetect-net
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana_dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana_datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/fraud_detection.json
